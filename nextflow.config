import java.nio.file.*

manifest {
    name = 'crukci-bioinformatics/nf-rnaseq'
    author = 'Chandra Chilamakuri'
    homePage = 'https://github.com/crukci-bioinformatics/nf-rnaseq'
    description = 'RNAseq pipeline based on salmon quantification'
    mainScript = 'rnaseq.nf'
    nextflowVersion = '>=22.04.3'
    version = '1.0.0'
    
}

executor {
    $slurm {
        queueSize = 150
        pollInterval = '30sec'
        queue = 'general'
        clusterOptions = "--nodes=1 --open-mode=truncate"
    }
}

singularity.enabled = true
singularity.autoMounts = true
singularity.runOptions = "-B '${projectDir}'"

clean = true
process {
    container = "crukcibioinformatics/rnaseq:0.4"

    errorStrategy = {
        task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish'
    }

}

params {
    //showSettings        = true
    //help                = false
    // Software paths (inside the container).
    // installed using conda and add the follwing path
    // /opt/conda/envs/RNAseq/bin

    // alignment.csv is output from kisckstart used for just quantification
    kickstartCSV          = "alignment.csv" 
    // This file used for DESeq2 analysis
    sampleSheet           = "samplesheet.csv"
    
    // salmon parameters
    quantTool             = "salmon"
    salmonVersion         = "1.9.0"
    fastqDir              = "fastq"
    quantOutDir           = "quantOut"
    // salmon index kmer length, default 31
    kmerLen               = "31"
    // only supports pair-end data
    endType               = "pe"
    referenceRoot         = "/mnt/scratchb/bioinformatics/reference_data/reference_genomes"
    // RNAseq report parameters
    genome                = "mus_musculus"
    assembly              = "GRCm38"
    shortSpecies          = "mmu"
    contrastFile          = "contrasts.csv"
    design                = "SampleGroup"
    countsDir             = "counts"
    colorFactors          = "SampleGroup"
    DeOutDir              = "DE_analysis"
    pValCutoff            = 0.05
    genesToShow           = "NULL"
    templateDir           = "RNAseqReport"
    projectName           = "projectName"
    reportFile            = "${projectName}.html"
    //rScript             = "nf-rnaseq/bin/runRNAseqReport.R"
    rScript = "${projectDir}/bin/runRNAseqReport.R"
    rmdFile = "${projectDir}/bin/rnaseqReport.Rmd" 
}

try
{
    includeConfig "${launchDir}/rnaseq.config"
}
catch (NoSuchFileException e)
{
    // We'll check for missing mandatory parameters as the pipeline attempts to start.
}

profiles {
    standard {
        if (!params.referenceRoot) {
            params.referenceRoot = '/mnt/scratcha/bioinformatics/reference_data/reference_genomes'
        }
        process.executor = 'local'
        executor.$local.cpus = 6
        executor.$local.memory = 10.GB
    }

    cluster {
        if (!params.referenceRoot) {
            params.referenceRoot = '/mnt/scratcha/bioinformatics/reference_data/reference_genomes'
        }
        process.executor = 'slurm'
    }

    // Same as the "cluster" profile.
    general {
        if (!params.referenceRoot) {
            params.referenceRoot = '/mnt/scratcha/bioinformatics/reference_data/reference_genomes'
        }
        process.executor = 'slurm'
        process.queue = 'general'
    }

    // The new section of the cluster, the "epyc" queue.
    epyc {
        if (!params.referenceRoot) {
            params.referenceRoot = '/mnt/scratchc/bioinformatics/reference_data/reference_genomes'
        }
        process.executor = 'slurm'
        process.queue = 'epyc'
    }


    bioinf {
        if (!params.referenceRoot) {
            params.referenceRoot = '/data/reference_data/scratcha/reference_genomes'
        }
        process.executor = 'local'
        executor.$local.cpus = 20
        executor.$local.memory = 80.GB
    }
}

// https://www.nextflow.io/docs/latest/tracing.html
timeline {
    enabled = true
    file = "reports/execution_timeline.html"
}
report {
    enabled = true
    file = "reports/execution_report.html"
}
trace {
    enabled = false
    file = "reports/execution_trace.txt"
}
dag {
    enabled = false
    file = "reports/pipeline_dag.svg"
}
